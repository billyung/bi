<?xml version="1.0" encoding="utf-8"?>
<CDADescriptor>

    <DataSources>
        <Connection id="1" type="sql.jndi">
            <Jndi>SourceDB</Jndi>
        </Connection>

        <Connection id="2" type="sql.jndi">
            <Jndi>DestinationDB</Jndi>
        </Connection>

    </DataSources>



    <DataAccess id="getRemainingBranchesCollection" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Branches for Collections</Name>
<Query>
<![CDATA[

select o.office_id as branch_id, o.display_name as branch_name, 
    cast(round(ifnull(sum(ls.principal), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(ls.principal_paid), 0.0), 1) as char) as collected,
    cast(round(
            ( (ifnull(sum(ls.principal_paid), 0.0) * 100) / ifnull(sum(ls.principal), 0.0))
                ,1) as char) as collected_pc
from office o
join account a on a.office_id = o.office_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  
    
join loan_schedule ls on ls.account_id = ast.account_id and ls.action_date = ${currentDate} 
where ast.new_status in (5,9)
   
group by o.office_id 
having ifnull(sum(ls.principal), 0.0) > ifnull(sum(ls.principal_paid), 0.0)    
order by 5 desc

LIMIT ${limit}
]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>




    <DataAccess id="getRemainingLOCollection" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Loan Officers for Collections</Name>
<Query>
<![CDATA[

select p.personnel_id as loan_officer_id, p.display_name as loan_officer_name, 
    cast(round(ifnull(sum(ls.principal), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(ls.principal_paid), 0.0), 1) as char) as collected,
    cast(round(
            ( (ifnull(sum(ls.principal_paid), 0.0) * 100) / ifnull(sum(ls.principal), 0.0))
                ,1) as char) as collected_pc
from personnel p
join account a on a.personnel_id = p.personnel_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  
    
join loan_schedule ls on ls.account_id = ast.account_id and ls.action_date = ${currentDate}
where ast.new_status in (5,9)
and p.office_id = ${tableParentId}

group by p.personnel_id 
having ifnull(sum(ls.principal), 0.0) > ifnull(sum(ls.principal_paid), 0.0)    
order by 5 desc

LIMIT ${limit}
]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="tableParentId" type="Integer" default="0"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>




    <DataAccess id="getRemainingCenterCollection" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Centers for Collections</Name>
<Query>
<![CDATA[

select center.customer_id as center_id, center.display_name as center_name, 
    cast(round(ifnull(sum(ls.principal), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(ls.principal_paid), 0.0), 1) as char) as collected,
    cast(round(
            ( (ifnull(sum(ls.principal_paid), 0.0) * 100) / ifnull(sum(ls.principal), 0.0))
                ,1) as char) as collected_pc
from customer c
join customer grp on grp.customer_id = c.parent_customer_id
join customer center on center.customer_id = grp.parent_customer_id 
join account a on a.customer_id = c.customer_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  
    
join loan_schedule ls on ls.account_id = ast.account_id and ls.action_date = ${currentDate}
where ast.new_status in (5,9)
and c.loan_officer_id = ${tableParentId}

group by center.customer_id
having ifnull(sum(ls.principal), 0.0) > ifnull(sum(ls.principal_paid), 0.0)    
order by 5 desc

LIMIT ${limit}
]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="tableParentId" type="Integer" default="0"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>






    <DataAccess id="getRemainingBranchesDisbursement" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Branches for Disbursements</Name>
<Query>
<![CDATA[
select o.office_id as branch_id, o.display_name as branch_name, 
    cast(round(ifnull(sum(la.loan_amount), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(att.amount), 0.0), 1) as char) as disbursed,
    cast(round(
            ( (ifnull(sum(att.amount), 0.0) * 100) / ifnull(sum(la.loan_amount), 0.0))
                ,1) as char) as disbursed_pc
from office o
join account a on a.office_id = o.office_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)  
    and la.disbursement_date = ${currentDate}
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id   
    
left join account_trxn att on att.account_id = ast.account_id and att.account_action_id = 10 and att.action_date = ${currentDate}
join loan_account la on la.account_id = ast.account_id  
where ast.new_status = 3   
group by o.office_id 
having ifnull(sum(la.loan_amount), 0.0) > ifnull(sum(att.amount), 0.0) 
order by 5 desc
    
LIMIT ${limit}

]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>



    <DataAccess id="getRemainingLODisbursement" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Loan Officers for Disbursements</Name>
<Query>
<![CDATA[
select p.personnel_id as loan_officer_id, p.display_name as loan_officer_name, 
    cast(round(ifnull(sum(la.loan_amount), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(att.amount), 0.0), 1) as char) as disbursed,
    cast(round(
            ( (ifnull(sum(att.amount), 0.0) * 100) / ifnull(sum(la.loan_amount), 0.0))
                ,1) as char) as disbursed_pc
from personnel p
join account a on a.personnel_id = p.personnel_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)  
    and la.disbursement_date = ${currentDate}
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id   
    
left join account_trxn att on att.account_id = ast.account_id and att.account_action_id = 10 and att.action_date = ${currentDate}
join loan_account la on la.account_id = ast.account_id  
where ast.new_status = 3   
and p.office_id = ${tableParentId}
group by p.personnel_id 
having ifnull(sum(la.loan_amount), 0.0) > ifnull(sum(att.amount), 0.0) 
order by 5 desc
    
LIMIT ${limit}

]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="tableParentId" type="Integer" default="0"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>




    <DataAccess id="getRemainingCenterDisbursement" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Remaining Centers for Disbursements</Name>
<Query>
<![CDATA[

select center.customer_id as center_id, center.display_name as center_name, 
    cast(round(ifnull(sum(la.loan_amount), 0.0), 1) as char) as expected, 
    cast(round(ifnull(sum(att.amount), 0.0), 1) as char) as disbursed,
    cast(round(
            ( (ifnull(sum(att.amount), 0.0) * 100) / ifnull(sum(la.loan_amount), 0.0))
                ,1) as char) as disbursed_pc
from customer c
join customer grp on grp.customer_id = c.parent_customer_id
join customer center on center.customer_id = grp.parent_customer_id 
join account a on a.customer_id = c.customer_id
join account_status_change_history ast on ast.account_id = a.account_id
join
    (select  la.account_id, max(account_status_change_id) as account_status_change_id
    from loan_account la
    join account_status_change_history ast on ast.account_id = la.account_id
    where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)  
    and la.disbursement_date = ${currentDate}
    group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id   
    
left join account_trxn att on att.account_id = ast.account_id and att.account_action_id = 10 and att.action_date = ${currentDate}
join loan_account la on la.account_id = ast.account_id  
where ast.new_status = 3   
and c.loan_officer_id = ${tableParentId}

group by center.customer_id 
having ifnull(sum(la.loan_amount), 0.0) > ifnull(sum(att.amount), 0.0) 
order by 5 desc    
LIMIT ${limit}

]]>
</Query>
        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
    		<Parameter name="tableParentId" type="Integer" default="0"/>
    		<Parameter name="limit" type="Integer" default="1000000"/>
        </Parameters>
    </DataAccess>









    <DataAccess id="getTargetAndCompleted" connection="1" type="sql" access="public" cache="false" cacheDuration="3600">
		   <Name>Get Target and Completed Figures for Collections and Disbursements</Name>
<Query>
<![CDATA[

select bigquery.typeName, bigquery.branches, bigquery.centers, bigquery.clients, 
    cast(bigquery.collection as char) as collection, 
    cast(bigquery.disbursement as char) as disbursement
from
((select "Target" as typeName,  repay.branches, repay.centers, repay.clients, repay.collection, disb.disbursement
from
    (select count(distinct(a.office_id)) as branches, count(distinct(center.customer_id)) as centers,
        count(distinct(c.customer_id)) as clients,  ifnull(sum(ls.principal), 0.0) as collection
    from loan_schedule ls
    join account a on a.account_id = ls.account_id
    join customer c on c.customer_id = a.customer_id
    join customer grp on grp.customer_id = c.parent_customer_id
    join customer center on center.customer_id = grp.parent_customer_id 
    join  account_status_change_history ast on ast.account_id = a.account_id
    join
        (select  la.account_id, max(account_status_change_id) as account_status_change_id
        from loan_account la
        join account_status_change_history ast on ast.account_id = la.account_id
        where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
        group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  

    where  ls.action_date = ${currentDate}
    and ast.new_status in (5,9) ) repay

 join 
    (select ifnull(sum(la.loan_amount), 0.0) as disbursement 
    from account_status_change_history ast
    join
        (select  la.account_id, max(account_status_change_id) as account_status_change_id
        from loan_account la
        join account_status_change_history ast on ast.account_id = la.account_id
        where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)  
        and la.disbursement_date = ${currentDate}
        group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id   
    
    left join account_trxn att on att.account_id = ast.account_id and att.account_action_id = 10 and att.action_date = ${currentDate}
    join loan_account la on la.account_id = ast.account_id  
    where ast.new_status = 3) disb)
    
    
    UNION ALL
    
    
    (select "Completed" as typeName, brrepay.branches, cerepay.centers, clrepay.clients, donerepay.collection, donedisb.disbursement
from
    (select count(*) as clients
    from
        (select a.customer_id 
        from loan_schedule ls
        join account a on a.account_id = ls.account_id
        join  account_status_change_history ast on ast.account_id = a.account_id
        join
            (select  la.account_id, max(account_status_change_id) as account_status_change_id
            from loan_account la
            join account_status_change_history ast on ast.account_id = la.account_id
            where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
            group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  

        where  ls.action_date = ${currentDate}
        and ast.new_status in (5,9)
        group by a.customer_id
        having sum(ls.principal - ls.principal_paid) <= 0) as xx) clrepay

join
    (select count(*) as centers
    from
        (select center.customer_id 
        from loan_schedule ls
        join account a on a.account_id = ls.account_id
        join customer c on c.customer_id = a.customer_id
        join customer grp on grp.customer_id = c.parent_customer_id
        join customer center on center.customer_id = grp.parent_customer_id 
        join  account_status_change_history ast on ast.account_id = a.account_id
        join
            (select  la.account_id, max(account_status_change_id) as account_status_change_id
            from loan_account la
            join account_status_change_history ast on ast.account_id = la.account_id
            where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
            group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  

        where  ls.action_date = ${currentDate}
        and ast.new_status in (5,9)
        group by center.customer_id
        having sum(ls.principal - ls.principal_paid) <= 0) as xx) cerepay
    
    join
    (select count(*) as branches
    from
        (select a.office_id 
        from loan_schedule ls
        join account a on a.account_id = ls.account_id
        join  account_status_change_history ast on ast.account_id = a.account_id
        join
            (select  la.account_id, max(account_status_change_id) as account_status_change_id
            from loan_account la
            join account_status_change_history ast on ast.account_id = la.account_id
            where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
            group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  

        where  ls.action_date = ${currentDate}
        and ast.new_status in (5,9)
        group by a.office_id
        having sum(ls.principal - ls.principal_paid) <= 0) as xx) brrepay

  join 
        (select ifnull(sum(ls.principal_paid), 0.0) as collection 
        from loan_schedule ls 
        join  account_status_change_history ast on ast.account_id = ls.account_id
        join
            (select  la.account_id, max(account_status_change_id) as account_status_change_id
            from loan_account la
            join account_status_change_history ast on ast.account_id = la.account_id
            where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)      
            group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id  

        where  ls.action_date = ${currentDate}
        and ast.new_status in (5,9)) as donerepay
    
    
join 
    (select  ifnull(sum(att.amount), 0.0) as disbursement 
    from account_status_change_history ast
    join
        (select  la.account_id, max(account_status_change_id) as account_status_change_id
        from loan_account la
        join account_status_change_history ast on ast.account_id = la.account_id
        where ast.changed_date <= DATE_SUB(${currentDate}, INTERVAL 1 DAY)  
        and la.disbursement_date = ${currentDate}
        group by la.account_id) maxast on maxast.account_status_change_id = ast.account_status_change_id   
    
    left join account_trxn att on att.account_id = ast.account_id and att.account_action_id = 10 and att.action_date = ${currentDate}
    where ast.new_status = 3) donedisb ) ) bigquery
    order by bigquery.typeName desc
]]>
</Query>

        <Parameters>
    		<Parameter name="currentDate" type="Date" pattern="yyyy-MM-dd" default="1900-01-01"/>
        </Parameters>

    </DataAccess>




</CDADescriptor>