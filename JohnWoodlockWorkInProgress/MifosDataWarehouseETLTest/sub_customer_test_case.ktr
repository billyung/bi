<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>sub_customer_test_case</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>&#47;</directory>
    <parameters>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>1000</size_rowset>
    <sleep_time_empty>1</sleep_time_empty>
    <sleep_time_full>1</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>5000</feedback_size>
    <using_thread_priorities>N</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit/>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <modified_user>-</modified_user>
  <modified_date>2007&#47;06&#47;07 12:04:59.781</modified_date>
  </info>
  <notepads>
    <notepad>
      <note>Identifies the1st entry for the test customer 
that matches the test date and test change.

 </note>
      <xloc>18</xloc>
      <yloc>215</yloc>
      <width>226</width>
      <heigth>60</heigth>
      <fontname>Microsoft Sans Serif</fontname>
      <fontsize>8</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>255</backgroundcolorgreen>
      <backgroundcolorblue>0</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <connection>
    <name>DestinationDB</name>
    <server/>
    <type>MYSQL</type>
    <access>JNDI</access>
    <database>DestinationDB</database>
    <port>1521</port>
    <username/>
    <password>Encrypted </password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>1521</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>STREAM_RESULTS</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <connection>
    <name>SourceDB</name>
    <server/>
    <type>MYSQL</type>
    <access>JNDI</access>
    <database>SourceDB</database>
    <port>1521</port>
    <username/>
    <password>Encrypted </password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>1521</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>STREAM_RESULTS</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <connection>
    <name>wcm</name>
    <server>localhost</server>
    <type>MYSQL</type>
    <access>Native</access>
    <database>wcm</database>
    <port>3306</port>
    <username>root</username>
    <password>Encrypted 2be98afc86aa7f2e4cb79ce7dc781bed6</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>3306</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>STREAM_RESULTS</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>Get Customer Entries for Change Type</from><to>Failed?</to><enabled>Y</enabled> </hop>  <hop> <from>Failed?</from><to>Select values</to><enabled>Y</enabled> </hop>  <hop> <from>Select values</from><to>Test Case</to><enabled>Y</enabled> </hop>  <hop> <from>Cascade Check</from><to>Select values 2</to><enabled>Y</enabled> </hop>  <hop> <from>Select values 2</from><to>Test Case</to><enabled>Y</enabled> </hop>  <hop> <from>Failed?</from><to>Remove Test pass&#47;fail info</to><enabled>Y</enabled> </hop>  <hop> <from>Remove Test pass&#47;fail info</from><to>Cascade Check</to><enabled>Y</enabled> </hop>  <hop> <from>Test Case</from><to>Mapping output specification</to><enabled>Y</enabled> </hop>  <hop> <from>Mapping input specification</from><to>Get Customer Entries for Change Type</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>Cascade Check</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <compatible>N</compatible>
    <jsScripts>      <jsScript>        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>
function fail_test(msg)
{
	test_result = &quot;Fail&quot;;
	fail_reason = msg;
	wasError = &quot;Y&quot;;
}

function test_results(dim_type)
{
return;
&#47;&#47;each dim_customer&#47;loan&#47;savings entry linked to the changed customer at the time of the change (including itself) must get a new entry
&#47;&#47;the tests are: 
&#47;&#47;same number of entries before change as after (a distinct is applied to after as items could have been added)
&#47;&#47;each customer&#47;loan_account&#47;savings_account id only appears once
&#47;&#47;id must be the same, key must be different

	if (changedResults.length != previousResults.length)
	{
		fail_test(&quot;Number of Changed &quot; + dim_type + &quot; Entries: &quot; +  changedResults.length + &quot; doesn&apos;t match Number of Previous &quot; + dim_type + &quot; Entries: &quot; + previousResults.length);

		writeToLog(&quot;e&quot;, &quot;Number of Changed &quot; + dim_type + &quot; Entries: &quot; +  changedResults.length + &quot; doesn&apos;t match Number of Previous &quot; + dim_type + &quot; Entries: &quot; + previousResults.length);
		for (var i in changedResults)
		{
			writeToLog(&quot;e&quot;, &quot;changed set - id: &quot; + changedResults[i][0] + &quot; - Key: &quot; + changedResults[i][1]);
		}		
		for (var i in previousResults)
		{
			writeToLog(&quot;e&quot;, &quot;previous set - id: &quot; + previousResults[i][0] + &quot; - Key: &quot; + previousResults[i][1]);
		}

		return;
	}

	for (var i in changedResults)
	{

    	if (i &gt; 0)
		{
    		if (changedResults[i][0] == changedResults[i - 1][0])
			{
				fail_test(dim_type + &quot; Id: &quot; + changedResults[i][0] + &quot; In Changed Resultset More than Once&quot;);
				return;
			}
		}


    	if (changedResults[i][0] != previousResults[i][0])
		{
			fail_test(dim_type + &quot; Ids don&apos;t match: Changed: &quot; + changedResults[i][0] + &quot; Previous: &quot; + previousResults[i][0]);
			return;

		}

    	if (changedResults[i][1] == previousResults[i][1])
		{
			fail_test(dim_type + &quot; Keys are not different: Changed: &quot; + changedResults[i][1] + &quot; Previous: &quot; + previousResults[i][1]);
			return;
		}

	}
}

var test_result = &quot;Pass&quot;;
var fail_reason = &quot;&quot;;


var DBConnection = &quot;DestinationDB&quot;;
var wasError = &quot;N&quot;;

int_customer_level_id = parseInt(customer_level_id);

switch(int_customer_level_id)
{
case 1:
  level_key_name = &quot;customer_key&quot;;
  break;
case 2:
  level_key_name = &quot;group_key&quot;;
  break;
case 3:
  level_key_name = &quot;center_key&quot;;
  break;
default:
  level_key_name = &quot;Unknown customer level: &quot; + customer_level_id;
}

&#47;&#47;customerMin = &quot; and customer_key = (select min(customer_key) from dim_customer min where min.customer_id = dim_customer.customer_id and min.valid_from = &apos;&quot; + test_date + &quot;&apos;) &quot;;
&#47;&#47;loanMin = &quot; and loan_account_key = (select min(loan_account_key) from dim_loan min where min.loan_account_id = dim_loan.loan_account_id and min.valid_from = &apos;&quot; + test_date + &quot;&apos;) &quot;;
&#47;&#47;savingsMin = &quot; and savings_account_key = (select min(savings_account_key) from dim_savings min where min.savings_account_id = dim_savings.savings_account_id and min.valid_from = &apos;&quot; + test_date + &quot;&apos;) &quot;;
customerMin = &quot;&quot;;
loanMin = &quot;&quot;;
savingsMin = &quot;&quot;;

var sqlCustomerChanged = &quot;select customer_id, customer_key from dim_customer where &quot; + level_key_name + &quot; = &quot; + customer_key + &quot; and valid_from = &apos;&quot; + test_date + &quot;&apos; &quot; + customerMin + &quot; order by customer_id, customer_key;&quot;;
var sqlCustomerPrevious = &quot;select customer_id, customer_key from dim_customer where &quot; + level_key_name + &quot; = &quot; + customer_key_prev + &quot; and valid_to = &apos;&quot; + test_date + &quot;&apos; order by customer_id, customer_key;&quot;;

var sqlLoanChanged = &quot;select loan_account_id, loan_account_key from dim_loan where &quot; + level_key_name + &quot; = &quot; + customer_key + &quot; and valid_from = &apos;&quot; + test_date + &quot;&apos; &quot; + loanMin + &quot; order by loan_account_id, loan_account_key;&quot;;
var sqlLoanPrevious = &quot;select loan_account_id, loan_account_key from dim_loan where &quot; + level_key_name + &quot; = &quot; + customer_key_prev + &quot; and valid_to = &apos;&quot; + test_date + &quot;&apos; order by loan_account_id, loan_account_key;&quot;;
 
var sqlSavingsChanged = &quot;select savings_account_id, savings_account_key from dim_savings where &quot; + level_key_name + &quot; = &quot; + customer_key + &quot; and valid_from = &apos;&quot; + test_date + &quot;&apos; &quot; + savingsMin + &quot; order by savings_account_id, savings_account_key;&quot;;
var sqlSavingsPrevious = &quot;select savings_account_id, savings_account_key from dim_savings where &quot; + level_key_name + &quot; = &quot; + customer_key_prev + &quot; and valid_to = &apos;&quot; + test_date + &quot;&apos; order by savings_account_id, savings_account_key;&quot;;
&#47;&#47;Alert(sqlCustomerChanged);
var changedResults = fireToDB(DBConnection, sqlCustomerChanged);
var previousResults = fireToDB(DBConnection, sqlCustomerPrevious);

test_results(&quot;Customer&quot;);

if (wasError == &quot;N&quot;)
{
	changedResults = fireToDB(DBConnection, sqlLoanChanged);
	previousResults = fireToDB(DBConnection, sqlLoanPrevious);
	test_results(&quot;Loan Account&quot;);
}
if (wasError == &quot;N&quot;)
{
	changedResults = fireToDB(DBConnection, sqlSavingsChanged);
	previousResults = fireToDB(DBConnection, sqlSavingsPrevious);
	test_results(&quot;Savings Account&quot;);
}

</jsScript_script>
      </jsScript>    </jsScripts>    <fields>      <field>        <name>test_result</name>
        <rename>test_result</rename>
        <type>String</type>
        <length>4</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>      <field>        <name>fail_reason</name>
        <rename>fail_reason</rename>
        <type>String</type>
        <length>100</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>380</xloc>
      <yloc>217</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Failed?</name>
    <type>FilterRows</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
<send_true_to>Select values</send_true_to>
<send_false_to>Remove Test pass&#47;fail info</send_false_to>
    <compare>
<condition>
 <negated>N</negated>
 <leftvalue>test_result</leftvalue>
 <function>=</function>
 <rightvalue/>
 <value><name>constant</name><type>String</type><text>Fail</text><length>-1</length><precision>-1</precision><isnull>N</isnull><mask/></value> </condition>
    </compare>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>575</xloc>
      <yloc>18</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Get Customer Entries for Change Type</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <compatible>N</compatible>
    <jsScripts>      <jsScript>        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>function fail_test(msg)
{
	test_result = &quot;Fail&quot;;
	fail_reason = msg;
}

function getCustomerDataSet()
{
	sqlCustomer = &quot;select customer_key, customer_level_id, customer_status, group_key, center_key, loan_officer_key, branch_key &quot;;
	sqlCustomer = sqlCustomer + &quot; , display_name, valid_from &quot;;
	sqlCustomer = sqlCustomer + &quot; from dim_customer where customer_id = &quot; + test_customer_id;
	sqlCustomer = sqlCustomer + &quot; order by customer_key&quot;;

	sqlResults = fireToDB(DBConnection, sqlCustomer);
}

function doIdsMatch(sqlInput)
{
	sqlR = fireToDB(DBConnection, sqlInput);

	if (sqlR.length != 1)
	{
			fail_test(&quot;System Error - query expected to return 1 row returned: &quot; + sqlR.length + &quot; rows - Query: &quot; + sqlInput);
			return &quot;Error&quot;;
	}

	if (parseInt(sqlR[0][0]) == parseInt(sqlR[0][1]))
	{
		return &quot;Y&quot;;
	}
	return &quot;N&quot;;

}


function getChange(entityType, oldKey, newKey)
{
	if (oldKey == newKey)
	{
			return &quot;Same&quot;;
	}

	switch(entityType)
	{
	case &quot;branch&quot;:
		entityTypeSQL = &quot;office&quot;;
  		break;
	case &quot;loan officer&quot;:
		entityTypeSQL = &quot;personnel&quot;;
  		break;
	case &quot;center&quot;:
		entityTypeSQL = &quot;customer&quot;;
  		break;
	case &quot;group&quot;:
		entityTypeSQL = &quot;customer&quot;;
  		break;
	default:
		fail_test(&quot;System Error - Unknown value for entityType: &quot; + entityType);
		return &quot;Error&quot;;
	}

	sql = &quot;select old_id, new_id from &quot;
	sql = sql + &quot;(select &quot; + entityTypeSQL + &quot;_id as old_id from dim_&quot; + entityTypeSQL + &quot; where &quot; + entityTypeSQL +&quot;_key = &quot; + oldKey + &quot; ) a &quot;
	sql = sql + &quot;join (select &quot; + entityTypeSQL + &quot;_id as new_id from dim_&quot; + entityTypeSQL + &quot; where &quot; + entityTypeSQL + &quot;_key = &quot; + newKey + &quot;) b &quot;

	idsMatch = doIdsMatch(sql);
	switch(idsMatch)
	{
	case &quot;Y&quot;:
		return &quot;Version&quot;;
  		break;
	case &quot;N&quot;:
		return &quot;Changed&quot;;
  		break;
	case &quot;Error&quot;:
		return &quot;Error&quot;;
  		break;
	default:
		fail_test(&quot;System Error - Unknown return value from doIdsMatch: &quot; + idsMatch);
		return &quot;Error&quot;;
	}

}


function getChangeType(row_num)
{

	if ((customer_status == prev_customer_status) &amp;&amp; (group_key == prev_group_key) &amp;&amp; (center_key == prev_center_key) &amp;&amp; (loan_officer_key == prev_loan_officer_key) &amp;&amp; (branch_key == prev_branch_key))
	{
		fail_test(&quot;System Error - Entry has no change - row index:&quot; + row_num);
		return &quot;Error&quot;;
	}

	if (customer_status != prev_customer_status)
	{
		if ((group_key == prev_group_key) &amp;&amp; (center_key == prev_center_key) &amp;&amp; (loan_officer_key == prev_loan_officer_key) &amp;&amp; (branch_key == prev_branch_key))
		{
			Alert(&quot;status change&quot;);
			return &quot;status&quot;;
		}
		else
		{
			fail_test(&quot;System Error - Status Change... but other row changes found - row index: &quot; + row_num);
			return &quot;Error&quot;;
		}
	}


&#47;&#47;branch
	if (branch_key == 0 || prev_branch_key == 0)
	{
			fail_test(&quot;System Error - branch key is 0 - row index: &quot; + row_num);
			return &quot;Error&quot;;
	}
	branch_change = getChange(&quot;branch&quot;, prev_branch_key, branch_key);
	if (branch_change == &quot;Version&quot;)
	{
		fail_test(&quot;System Error - Branch IDs same but no office versioning supported: old Key: &quot; + prev_branch_key + &quot; new Key &quot; + branch_key);
		return &quot;Error&quot;;
	}
	if (branch_change == &quot;Error&quot;)
	{
			return &quot;Error&quot;;
	}

&#47;&#47;loan officer
	loan_officer_change = getChange(&quot;loan officer&quot;, prev_loan_officer_key, loan_officer_key);
	if (loan_officer_change == &quot;Version&quot;)
	{
		fail_test(&quot;System Error - Loan Officer IDs same - invalid because Loan Officers moving branch don&apos;t bring their customers with them: old Key: &quot; + prev_loan_officer_key + &quot; new Key &quot; + loan_officer_key);
		return &quot;Error&quot;;
	}
	if (loan_officer_change == &quot;Error&quot;)
	{
			return &quot;Error&quot;;
	}

&#47;&#47;center
	center_change = getChange(&quot;center&quot;, prev_center_key, center_key);

&#47;&#47;group
	group_change = getChange(&quot;group&quot;, prev_group_key, group_key);
 
Alert(&quot;Branch Change: &quot; + branch_change + &quot;      LO Change: &quot; + loan_officer_change + &quot;      Center Change: &quot; + center_change + &quot;      Group Change: &quot; + group_change);





	if (branch_change == &quot;Same&quot; &amp;&amp; loan_officer_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Version&quot; &amp;&amp; group_change == &quot;Same&quot;)
	{
		return &quot;center loan officer&quot;;
	}
	if (branch_change == &quot;Same&quot; &amp;&amp; loan_officer_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Same&quot; &amp;&amp; group_change == &quot;Version&quot;)
	{
		return &quot;group loan officer&quot;;
	}
	if (branch_change == &quot;Same&quot; &amp;&amp; loan_officer_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Same&quot; &amp;&amp; group_change == &quot;Same&quot;)
	{
		return &quot;client loan officer&quot;;
	}


	if (branch_change == &quot;Same&quot; &amp;&amp; center_change == &quot;Changed&quot; &amp;&amp; group_change == &quot;Version&quot; )
	{
		return &quot;center within branch&quot;;
	}
	if (branch_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Changed&quot; &amp;&amp; group_change == &quot;Version&quot; )
	{
		return &quot;center outside branch&quot;;
	}


	if (branch_change == &quot;Same&quot; &amp;&amp; group_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Same&quot; )
	{
		return &quot;group membership within center&quot;;
	}
	if (branch_change == &quot;Same&quot; &amp;&amp; group_change == &quot;Changed&quot; &amp;&amp; prev_group_key != 0 &amp;&amp; center_change == &quot;Changed&quot; )
	{
		return &quot;group membership within branch&quot;;
	}
	if (branch_change == &quot;Changed&quot; &amp;&amp; group_change == &quot;Changed&quot; &amp;&amp; center_change == &quot;Changed&quot; )
	{
		return &quot;group membership outside branch&quot;;
	}


	if (branch_change == &quot;Changed&quot; &amp;&amp; group_change == &quot;Same&quot; &amp;&amp; center_change == &quot;Same&quot; )
	{
		return &quot;client no group membership outside branch&quot;;
	}


	if (prev_group_key == 0 &amp;&amp; group_change == &quot;Changed&quot;)
	{
		return &quot;client no group membership becoming group member&quot;;
	}



	fail_test(&quot;System Error - Was a Change - Branch Change: &quot; + branch_change + &quot;   LO Change: &quot; + loan_officer_change + &quot;   Center Change: &quot; + center_change + &quot;   Group Change: &quot; + group_change + &quot; - but not picked up - row index: &quot; + row_num);
	return &quot;Error&quot;;
}

function getCustomerValues()
{
	for (var i in sqlResults)
	{
&#47;&#47;check from 2nd entry onwards to identify the 1st entry that matches change type on the date specified
    	if (i &gt; 0)
		{
&#47;&#47;convert db date to string
			db_date = sqlResults[i][8] + &quot;&quot;;
			if (db_date == test_date)
			{
				the_customer_level_id = parseInt(sqlResults[i][1]);
				customer_status = sqlResults[i][2];
				group_key = parseInt(sqlResults[i][3]);
				center_key = parseInt(sqlResults[i][4]);
				loan_officer_key = parseInt(sqlResults[i][5]);
				branch_key = parseInt(sqlResults[i][6]);
				prev_customer_status = sqlResults[i - 1][2];
				prev_group_key = parseInt(sqlResults[i - 1][3]);
				prev_center_key = parseInt(sqlResults[i - 1][4]);
				prev_loan_officer_key = parseInt(sqlResults[i - 1][5]);
				prev_branch_key = parseInt(sqlResults[i - 1][6]);

				change_is = getChangeType(i);
				if (change_is == test_change_type)
				{
					return i;
				}

				if (change_is == &quot;Error&quot;)
				{
					return -1;
				}
			}
		}
	}

	fail_test(&quot;Change not found&quot;);
	return -1;
}


var DBConnection = &quot;DestinationDB&quot;;
var test_result = &quot;Pass&quot;;
var fail_reason = &quot;&quot;;

var customer_key;
var customer_level_id;
var customer_key_prev;

var customer_status;
var group_key;
var center_key;
var loan_officer_key;
var branch_key;
var prev_customer_status;
var prev_group_key;
var prev_center_key;
var prev_loan_officer_key;
var prev_branch_key;

var sqlResults;

getCustomerDataSet();
changed_row = getCustomerValues();
if (changed_row != -1)
{
	customer_key = sqlResults[changed_row][0];
	customer_level_id = sqlResults[changed_row][1];
	customer_key_prev = sqlResults[changed_row - 1][0];
Alert(test_change_type + &quot; - Change Type Found: &quot;+ &quot;TEST NAME: &quot; + test_name + &quot; CUSTOMER ID&#47;NAME&#47;DATE: &quot; + test_customer_id + &apos;&#47;&apos; + test_customer + &apos;&#47;&apos; + test_date);

}




</jsScript_script>
      </jsScript>    </jsScripts>    <fields>      <field>        <name>test_result</name>
        <rename>test_result</rename>
        <type>String</type>
        <length>4</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>      <field>        <name>fail_reason</name>
        <rename>fail_reason</rename>
        <type>String</type>
        <length>100</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>      <field>        <name>customer_key</name>
        <rename>customer_key</rename>
        <type>Integer</type>
        <length>9</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>      <field>        <name>customer_level_id</name>
        <rename>customer_level_id</rename>
        <type>Integer</type>
        <length>4</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>      <field>        <name>customer_key_prev</name>
        <rename>customer_key_prev</rename>
        <type>Integer</type>
        <length>9</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>306</xloc>
      <yloc>21</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Mapping input specification</name>
    <type>MappingInput</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>
      <field>
        <name>test_name</name>
        <type>String</type>
        <length>100</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>test_customer_id</name>
        <type>Integer</type>
        <length>15</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>test_customer</name>
        <type>String</type>
        <length>100</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>test_date</name>
        <type>String</type>
        <length>10</length>
        <precision>-1</precision>
      </field>
      <field>
        <name>test_change_type</name>
        <type>String</type>
        <length>50</length>
        <precision>-1</precision>
      </field>
        <select_unspecified>N</select_unspecified>
    </fields>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>101</xloc>
      <yloc>20</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Mapping output specification</name>
    <type>MappingOutput</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>879</xloc>
      <yloc>211</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Remove Test pass&#47;fail info</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>        <select_unspecified>N</select_unspecified>
      <remove>        <name>test_result</name>
      </remove>      <remove>        <name>fail_reason</name>
      </remove>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>379</xloc>
      <yloc>107</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Select values</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>      <field>        <name>test_name</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_customer_id</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_customer</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_date</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_change_type</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_result</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>fail_reason</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>        <select_unspecified>N</select_unspecified>
    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>743</xloc>
      <yloc>96</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Select values 2</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>      <field>        <name>test_name</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_customer_id</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_customer</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_date</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_change_type</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>test_result</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>      <field>        <name>fail_reason</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>        <select_unspecified>N</select_unspecified>
    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>589</xloc>
      <yloc>217</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Test Case</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <compatible>N</compatible>
    <jsScripts>      <jsScript>        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>
if (test_result == &quot;Pass&quot;){	
	writeToLog(&quot;m&quot;, &quot;ETL Pass: &quot;+ test_name);
}
else
{
	writeToLog(&quot;e&quot;, &quot;ETL Fail: &quot;+ &quot;TEST NAME: &quot; + test_name + &quot; CUSTOMER ID&#47;NAME&#47;DATE: &quot; + test_customer_id + &apos;&#47;&apos; + test_customer + &apos;&#47;&apos; + test_date + &quot; CHANGE: &quot; + test_change_type  + &quot;: - &quot; + fail_reason);

}


</jsScript_script>
      </jsScript>    </jsScripts>    <fields>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>739</xloc>
      <yloc>213</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
